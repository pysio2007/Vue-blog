# yaml-language-server: $schema=https://json.schemastore.org/github-workflow
name: Build Docker Image

# 当 push 到 master 分支，或者创建以 v 开头的 tag 时触发，可根据需求修改
on:
  push:
    branches:
      - main
    tags:
      - v*

env:
  REGISTRY: docker.io
  IMAGE: pysio/pysioblog

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # 这里用于定义 GITHUB_TOKEN 的权限
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # 缓存 Docker 镜像以加速构建
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ./
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 配置 QEMU 和 buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # 登录到 Docker Hub 容器仓库
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 根据输入自动生成 tag 和 label 等数据，说明见下
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}

      # 在构建前创建证书文件
      - name: Save SSL files
        run: |
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem

      # 构建并上传
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect \
          ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.meta.outputs.version }}

  build-and-push-newjersey:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for NewJersey
        run: |
          echo "VUE_APP_ANYCAST=NewJersey" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:NewJersey --push .

  build-and-push-tokyo:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for Tokyo
        run: |
          echo "VUE_APP_ANYCAST=Tokyo" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:Tokyo --push .

  build-and-push-mumbai:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for Mumbai
        run: |
          echo "VUE_APP_ANYCAST=Mumbai" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:Mumbai --push .

  build-and-push-hongkong:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for HongKong
        run: |
          echo "VUE_APP_ANYCAST=HongKong" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:HongKong --push .

  build-and-push-amsterdam:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for Amsterdam
        run: |
          echo "VUE_APP_ANYCAST=Amsterdam" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:Amsterdam --push .

  build-and-push-florida:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for Florida
        run: |
          echo "VUE_APP_ANYCAST=Florida" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:Florida --push .

  build-and-push-tallinn:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for Tallinn
        run: |
          echo "VUE_APP_ANYCAST=Tallinn" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:Tallinn --push .

  build-and-push-singapore:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push for Singapore
        run: |
          echo "VUE_APP_ANYCAST=Singapore" > .env
          mkdir -p ssl
          echo "${{ secrets.SSL_CERT }}" > ssl/cert.pem
          echo "${{ secrets.SSL_KEY }}" > ssl/key.pem
          docker buildx build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:Singapore --push .

  build-summary:
    needs: [build-and-push, build-and-push-newjersey, build-and-push-tokyo, build-and-push-mumbai, build-and-push-hongkong, build-and-push-amsterdam, build-and-push-florida, build-and-push-tallinn, build-and-push-singapore]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "### 构建完成! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "| 镜像标签 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| latest | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| NewJersey | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Tokyo | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Mumbai | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| HongKong | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Amsterdam | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Florida | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Tallinn | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Singapore | ✅ |" >> $GITHUB_STEP_SUMMARY
          
          echo "### 镜像地址" >> $GITHUB_STEP_SUMMARY
          echo "\`docker pull docker.io/pysio/pysioblog:TAG\`" >> $GITHUB_STEP_SUMMARY
